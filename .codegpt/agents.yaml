# agents.yaml
# Configuración de agentes Codex con integración AI Foundry

agents:
  # ===== AGENTES PRINCIPALES CODEX =====
  - name: Architect_BoatRental
    repository: https://github.com/intuit44/BoatBooking
    branch: main
    paths:
      - README.md
      - package.json
      - shared/
      - scripts/
      - .gitignore
      - .prettierrc
      - .codegpt/agents.yaml
      - ai-foundry-agents.yaml
      - AGENTS.md
    description: >
      Agente principal encargado de la arquitectura general del proyecto, coordinación entre módulos,
      estructura de carpetas, convenciones de código, estrategia de versiones, seguridad global y decisiones de infraestructura.
      Tiene acceso a los archivos base del sistema y controla la coherencia entre agentes.


  - name: Mobile_App_Agent
    repository: https://github.com/intuit44/BoatBooking
    branch: main
    paths:
      - mobile-app/
    description: >
      Agente especializado en el desarrollo móvil con React Native + Expo.
      Encargado del rendimiento, navegación, Redux Toolkit, UI responsive, integración con APIs, subida de imágenes,
      validación de formularios, y soporte multiplataforma (Android, iOS, Web).
      Responsable de detectar errores de tipado y renderizado en la app móvil.
    ai_foundry_support:
      - ReadTsxAgent
      - RefactorAgent
      - PerformanceOptimizer
      - TestingExpert
    capabilities:
      - react_native_development
      - expo_sdk_management
      - ui_ux_implementation
      - state_management
      - testing_mobile

  - name: AdminPanel_Agent
    repository: https://github.com/intuit44/BoatBooking
    branch: main
    paths:
      - admin-panel/
    description: >
      Agente responsable del panel administrativo web creado con Next.js + Material UI.
      Su función incluye gestionar vistas protegidas, SSR, formularios de administración,
      dashboards de control y seguridad del lado del cliente.
      Se enfoca en experiencia del administrador, manejo de sesiones y filtros de datos.
    ai_foundry_support:
      - RefactorAgent
      - TestingExpert
    capabilities:
      - nextjs_development
      - material_ui_implementation
      - ssr_configuration
      - admin_features

  - name: Backend_Agent
    repository: https://github.com/intuit44/BoatBooking
    branch: main
    paths:
      - backend/
      - amplify/
    description: >
      Agente experto en el backend serverless. Gestiona funciones Lambda (TypeScript), GraphQL con AppSync,
      DynamoDB, autenticación con Cognito, subida a S3, validación con Joi, despliegue con Serverless Framework
      y flujos CI/CD. Se encarga también de la seguridad del backend y la conexión con servicios de AWS.

  - name: Agent975
    description: >
      Agente simbólico conectado a Azure AI Foundry para pruebas de conexión,
      ejecución y trazabilidad desde run-agent975.mjs. Se usa como plantilla
      base para crear otros agentes conectados a proyectos en AI Studio.
    entry: "src/agents/agent975/run-agent975.mjs"
    context: ".codegpt/agents.context.json"
    platform: "local"
    capabilities:
      - "agent_execution"
      - "connectivity_testing"
      - "ai_project_client_usage"
    integration_with:
      - "Architect_BoatRental"
    
  # ===== AGENTES EXTERNOS AI FOUNDRY =====
  - name: ReadTsxAgent
    external: true
    platform: ai-foundry
    endpoint: https://boatrentalfoundry-dev.openai.azure.com/openai/deployments/read_tsx_agent/chat/completions?api-version=2023-12-01-preview
    auth_token: ${FOUNDRY_AUTH_TOKEN}
    integration_with:
      - Mobile_App_Agent
    description: >
      Análisis profundo de componentes TSX, soporte para Mobile_App_Agent

  - name: RefactorAgent
    external: true
    platform: ai-foundry
    endpoint: https://boatrentalfoundry-dev.openai.azure.com/openai/deployments/refactor_agent/chat/completions?api-version=2023-12-01-preview
    auth_token: ${FOUNDRY_AUTH_TOKEN}
    integration_with:
      - Mobile_App_Agent
      - Backend_Agent
    description: >
      Refactorización compleja, funciones grandes y optimización

  - name: PerformanceOptimizer
    external: true
    platform: ai-foundry
    endpoint: https://boatrentalfoundry-dev.openai.azure.com/openai/deployments/performance_optimizer/chat/completions?api-version=2023-12-01-preview
    auth_token: ${FOUNDRY_AUTH_TOKEN}
    integration_with:
      - Mobile_App_Agent
      - Backend_Agent
    description: >
      Optimización de performance, análisis de bundle y queries, soporte para Mobile_App_Agent y Backend_Agent

  - name: ArchitectureAnalyzer
    external: true
    platform: ai-foundry
    endpoint: https://boatrentalfoundry-dev.openai.azure.com/openai/deployments/architecture_analyzer/chat/completions?api-version=2023-12-01-preview
    auth_token: ${FOUNDRY_AUTH_TOKEN}
    integration_with:
      - Architect_BoatRental
    description: >
      Análisis de arquitectura, dependencias y escalabilidad, soporte para Architect_BoatRental

  - name: TestingExpert
    external: true
    platform: ai-foundry
    endpoint: https://boatrentalfoundry-dev.openai.azure.com/openai/deployments/testing_expert/chat/completions?api-version=2023-12-01-preview
    auth_token: ${FOUNDRY_AUTH_TOKEN}
    integration_with:
      - Mobile_App_Agent
      - Backend_Agent
      - AdminPanel_Agent
    description: >
      Generación y análisis avanzado de tests, cobertura y mocks, soporte para todos los agentes principales

  - name: azure-foundry-agent
    path: "."
    tags:
      - "azure"
      - "ai-foundry"
      - "gpt-35-turbo-instruct"
      - "agent"
    include:
      - ".env"
      - "*.yaml"
      - "*.json"
    azure_config:
      deployment_name: "gpt-35-turbo-instruct"
      model_name: "gpt-35-turbo-instruct"
      model_version: "0914"
      endpoint: "https://boatrentalfoundry-dev.openai.azure.com/"
      api_version: "2023-12-01-preview"
      rate_limits:
        tokens_per_minute: 1000
        requests_per_minute: 6
      deployment_type: "Standard"
      lifecycle_status: "GenerallyAvailable"

# ===== CONFIGURACIÓN DE INTEGRACIÓN =====
integration_config:
  # Cuándo invocar agentes de AI Foundry
  auto_invoke_rules:
    - condition: "file_size > 500_lines"
      action: "suggest_ai_foundry_analysis"
      
    - condition: "complexity_score > 15"
      action: "auto_invoke_refactor_agent"
      
    - condition: "test_coverage < 70%"
      action: "auto_invoke_testing_expert"
      
    - condition: "performance_regression_detected"
      action: "auto_invoke_performance_optimizer"

  # Comunicación entre agentes
  communication_protocol:
    primary_channel: "codex_internal"
    secondary_channel: "azure_service_bus"
    fallback: "webhook"

  # Flujo de trabajo híbrido
  workflow:
    1_initial_analysis: "codex_agent"
    2_complex_tasks: "ai_foundry_agent"
    3_implementation: "codex_agent"
    4_validation: "both"

# ===== CASOS DE USO PARA AI FOUNDRY =====
ai_foundry_use_cases:
  high_priority:
    - "Refactorización de componentes con más de 300 líneas"
    - "Optimización de queries GraphQL complejas"
    - "Análisis de arquitectura para nuevos features"
    - "Generación de tests para código legacy"
    
  medium_priority:
    - "Análisis de performance de componentes"
    - "Detección de code smells"
    - "Sugerencias de mejoras de accesibilidad"
    
  low_priority:
    - "Formateo de código"
    - "Actualización de documentación"
    - "Renombrado de variables"

# ===== MÉTRICAS Y MONITOREO =====
monitoring:
  track_metrics:
    - agent_response_time
    - task_completion_rate
    - ai_foundry_invocation_count
    - cost_per_task
    
  alerts:
    - type: "rate_limit_approaching"
      threshold: 80
      notify: "architect_boat_rental"
      
    - type: "complex_task_detected"
      threshold: "complexity > 20"
      action: "suggest_ai_foundry"

# ===== CONFIGURACIÓN DE AZURE =====
azure_config:
  ai_foundry:
    endpoint: "https://boatrentalfoundry-dev.openai.azure.com/openai/deployments/gpt-35-turbo-instruct/completions?api-version=2022-12-01"
    api_version: "2023-12-01-preview"
    deployments:
      - name: "gpt-35-turbo-instruct"
        purpose: "quick_analysis"
        rate_limit: 1000
      - name: "gpt-4"
        purpose: "complex_refactoring"
        rate_limit: 500

  azure_functions:
    - name: "read-tsx-agent"
      url: "read-tsx-agent-fda2h6g7gtc2h5c9.eastus-01.azurewebsites.net"
      status: "active"
      purpose: "tsx_analysis"

